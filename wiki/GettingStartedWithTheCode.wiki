#summary How to install the code and run your first tests.
#labels Featured,Phase-Implementation

= Introduction =

If you want to dive in and experiment with the automated tests, there are various steps you need to complete. Here's an overview of these steps. You may need to do some additional research if you're unfamiliar with some of the tools and concepts. Let me know how you get on by commenting on this wiki page. I can't promise I'll be able to help in individual cases, however I do read all your comments and try to improve the documentation and the project code based on comments and feedback.

I recommend using Microsoft Windows or Ubuntu to run the code as webdriver (see later) supports native events on these platforms. Native events allow webdriver to generate the tab characters used by some of this project's tests. 

Also, the tests are currently written to use Firefox. I recommend you start with running the tests with Firefox (install a current version if you don't have the program already). You can tweak and experiment with other web browsers, platforms, etc once you've comfortable with running the example tests.

= Details =
Checkout the code from this site. See http://code.google.com/p/web-accessibility-testing/source/checkout for details of how to do so, you probably need to install a subversion client program, or similar software. There is some general advice from the code.google.com site on how to do so.

This project relies on the opensource WebDriver test automation tool, available as part of the selenium project http://code.google.com/p/selenium Download selenium-java-xxx.zip from http://code.google.com/p/selenium/downloads/list and unpack the contents of the file into a known folder.

For the internal tests, this project also relies on an older version of an embedded web server called jetty. Download jetty 6 from codehaus http://dist.codehaus.org/jetty/ Take the latest version (with the highest version number) and unpack the contents.

If you use eclipse:
   * Create a new eclipse project, link it to the downloaded source for this project.
   * Add all the libraries from the unpacked selenium-java-xxx.zip to the build path as external libraries.
   * Add the 3 jetty jar files from the lib folder to the build path in eclipse.

You should now be able to compile and run the tests. The tests are written as JUnit tests. The tests should each start a fresh instance of Firefox, tab around the web page - highlighting the visited elements with an orange background and complete without error.

Now you can experiment with creating tests for your web application. Good luck with your bug hunting!


